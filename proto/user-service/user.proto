syntax = "proto3";

package user;

option go_package = "golang-microservices-boilerplate/proto/user-service";

import "protoc-gen-openapiv2/options/annotations.proto";
import "google/api/annotations.proto";
// import "google/protobuf/empty.proto"; // Removed import for Empty

// Define overall Swagger info
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "User Service API";
    version: "1.0";
    description: "API for user management operations";
    contact: {
      name: "User Service Team";
      email: "support@example.com";
    }
  };
  // Optional: Add schemes, consumes, produces if needed
  schemes: HTTP; // Or HTTPS, or both [HTTP, HTTPS]
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
};

service UserService {
  // Create a new user
  rpc CreateUser(CreateUserRequest) returns (UserResponse) {
    option (google.api.http) = {
      post: "/api/v1/users"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Creates a new user account. Requires email, password, first name, last name, and role.";
      summary: "Create a new user";
      tags: "Users"; // Group operations under 'Users' tag in Swagger UI
      // Example of adding response description
      responses: {
        key: "200"; // HTTP Status Code
        value: {
          description: "User created successfully";
          schema: {
            json_schema: { // Reference the expected response message
              ref: "#/definitions/userUserResponse";
            }
          }
        }
      }
      // Add other responses like 400, 500 etc. if needed
    };
  }

  // Get a user by ID
  rpc GetUser(GetUserRequest) returns (UserResponse) {
    option (google.api.http) = {
      get: "/api/v1/users/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Retrieves a user by their unique ID.";
      summary: "Get a user by ID";
      tags: "Users";
      responses: {
        key: "200";
        value: {
          description: "User details retrieved successfully";
          schema: { json_schema: { ref: "#/definitions/userUserResponse"; } }
        }
      }
      // Add 404 response example
      responses: {
        key: "404";
        value: { description: "User not found"; }
      }
    };
  }

  // Update a user
  rpc UpdateUser(UpdateUserRequest) returns (UserResponse) {
    option (google.api.http) = {
      put: "/api/v1/users/{id}"
      body: "*" // Specify which fields go in the body (use '*' for all non-path params)
      // Example: Use patch if only updating specific fields:
      // patch: "/api/v1/users/{id}"
      // body: "*" // Or specify fields: body: "user_update_data" if nested
    };
     option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Updates an existing user's details. Only provided fields are updated.";
      summary: "Update a user";
      tags: "Users";
       responses: {
        key: "200";
        value: {
          description: "User updated successfully";
          schema: { json_schema: { ref: "#/definitions/userUserResponse"; } }
        }
      }
    };
  }

  // Delete a user
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse) {
    option (google.api.http) = {
      delete: "/api/v1/users/{id}"
    };
     option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Deletes a user by their unique ID. This might be a soft delete depending on implementation.";
      summary: "Delete a user";
      tags: "Users";
      responses: {
        key: "200"; // Often 200 or 204 (No Content) for successful DELETE
        value: {
          description: "User deleted successfully";
           schema: { json_schema: { ref: "#/definitions/userDeleteUserResponse"; } }
        }
      }
    };
  }

  // List all users with pagination
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {
    option (google.api.http) = {
      get: "/api/v1/users"
      // Query parameters (offset, limit) are automatically mapped from the request message
    };
     option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Retrieves a list of users with pagination support using offset and limit.";
      summary: "List users";
      tags: "Users";
       responses: {
        key: "200";
        value: {
          description: "List of users retrieved successfully";
           schema: { json_schema: { ref: "#/definitions/userListUsersResponse"; } }
        }
      }
    };
  }

  // Login user
  rpc Login(LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/api/v1/login"
      body: "*"
    };
     option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Authenticates a user and returns a JWT token upon successful login.";
      summary: "User login";
      tags: "Authentication"; // Use a different tag for auth-related endpoints
      responses: {
        key: "200";
        value: {
          description: "Login successful, token returned";
          schema: { json_schema: { ref: "#/definitions/userLoginResponse"; } }
        }
      }
      // Add 401 Unauthorized response
      responses: {
        key: "401";
        value: { description: "Invalid credentials"; }
      }
    };
  }

  // Find user by email
  rpc FindByEmail(FindByEmailRequest) returns (UserResponse) {
    option (google.api.http) = {
      get: "/api/v1/users/email/{email}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Finds and retrieves a user by their email address.";
      summary: "Find user by email";
      tags: "Users";
       responses: {
        key: "200";
        value: {
          description: "User found successfully";
          schema: { json_schema: { ref: "#/definitions/userUserResponse"; } }
        }
      }
      responses: {
        key: "404";
        value: { description: "User with specified email not found"; }
      }
    };
  }
}

// --- Message Definitions with Corrected Examples ---

// Request to create a new user
message CreateUserRequest {
  // Add message-level description
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "Create User Payload";
      description: "Data required to create a new user account.";
      required: ["email", "password", "first_name", "last_name"] // Mark fields as required in OpenAPI
    }
  };

  string email = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "User's unique email address. Used for login.";
    // Example must be a valid JSON string representation
    example: "\"john.doe@example.com\"";
    // Default is just the plain string value for documentation
    // default: "user@example.com"; // Only add default if it makes sense (maybe not for email)
    format: "email"; // Add standard formats
  }];
  string password = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "User's password (minimum 8 characters recommended).";
    example: "\"SecureP@ss123\"";
    // default: "password123"; // Avoid defaulting passwords
    format: "password"; // Hints to UI to potentially mask input
    min_length: 8;
  }];
  string first_name = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "User's first name.";
    example: "\"John\"";
    // default: "John"; // Optional: only if a default name makes sense
  }];
  string last_name = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "User's last name.";
    example: "\"Doe\"";
    // default: "Doe"; // Optional
  }];
  string role = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "User's role within the system (e.g., user, admin).";
    example: "\"user\"";
    default: "user"; // Default role often makes sense
    enum: ["\"manager\"", "\"admin\"", "\"officer\""]; // Specify allowed enum values as JSON strings
  }];
  // Optional fields don't need 'default', just 'example' is helpful
  string phone = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "User's phone number, preferably in E.164 format (optional).";
    example: "\"+14155552671\""; // E.164 example
    pattern: "^\\+[1-9]\\d{1,14}$"; // Regex pattern for E.164
  }];
  string address = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "User's full address (optional).";
    example: "\"1600 Amphitheatre Parkway, Mountain View, CA 94043\"";
  }];
  int32 age = 8 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "User's age (optional).";
    // Example for numbers is just the number as a string
    example: "30";
    format: "int32";
    minimum: 0; // Add constraints
  }];
  string profile_pic = 9 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "URL to user's profile picture (optional).";
    example: "\"https://example.com/profiles/johndoe.jpg\"";
    format: "url";
  }];
}

// Request to get a user by ID
message GetUserRequest {
   option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: { required: ["id"]; } // ID is required for this operation
   };
  string id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "The unique identifier (UUID or similar) of the user to retrieve.";
    // Example should reflect the actual ID format (e.g., UUID)
    example: "\"a1b2c3d4-e5f6-7890-1234-567890abcdef\"";
    format: "uuid"; // Or appropriate format
    // Default doesn't usually make sense for a specific resource ID lookup
  }];
}

// Request to update a user
message UpdateUserRequest {
  // ID comes from the path, other fields are optional in the body
  string id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "The unique identifier of the user to update (passed in URL path).";
    example: "\"a1b2c3d4-e5f6-7890-1234-567890abcdef\""; // Example for clarity
    format: "uuid";
    // read_only: true; // Mark as read-only in the request body schema if needed (though path param takes precedence)
  }];
  // Use 'optional' keyword for fields that might not be sent
  optional string first_name = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Updated first name (optional). If omitted, value is unchanged.";
    example: "\"Johnny\"";
  }];
  optional string last_name = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Updated last name (optional). If omitted, value is unchanged.";
    example: "\"Doe\"";
  }];
  optional string password = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Updated password (optional, min 8 characters). If omitted, password is unchanged.";
    example: "\"NewS3cureP@ss!\"";
    format: "password";
    min_length: 8;
  }];
  // Can add other updatable fields here (phone, address, etc.) marked as optional
   optional string phone = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Updated phone number (optional).";
    example: "\"+14155552672\"";
    pattern: "^\\+[1-9]\\d{1,14}$";
  }];
   optional string address = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Updated address (optional).";
    example: "\"1 Loop Drive, Cupertino, CA 95014\"";
  }];
   optional int32 age = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Updated age (optional).";
    example: "31";
    format: "int32";
    minimum: 0;
  }];
   optional string profile_pic = 8 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Updated URL to profile picture (optional).";
    example: "\"https://example.com/profiles/johndoe_v2.jpg\"";
    format: "url";
  }];
    optional string role = 9 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Updated user role (optional).";
    example: "\"admin\"";
    enum: ["\"manager\"", "\"admin\"", "\"officer\""];
  }];
}

// Request to delete a user
message DeleteUserRequest {
   option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: { required: ["id"]; }
   };
  string id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "The unique identifier of the user to delete.";
    example: "\"a1b2c3d4-e5f6-7890-1234-567890abcdef\"";
    format: "uuid";
    // No default for specific ID
  }];
}

// Response for user deletion
message DeleteUserResponse {
   option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
        title: "Deletion Confirmation";
        description: "Indicates whether the deletion was successful.";
    }
   };
  bool success = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
     description: "True if the user was deleted successfully.";
     // Example for booleans is true/false (no quotes needed in the example string itself)
     example: "true";
  }];
}

// Request to list users with pagination
message ListUsersRequest {
  // Using offset/limit is common for pagination
  int32 offset = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Number of items to skip before starting to collect the result set.";
    example: "0"; // JSON number
    default: "0";  // Documented default is 0
    format: "int32";
    minimum: 0;
  }];
  int32 limit = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Maximum number of items to return.";
    example: "25"; // JSON number
    default: "10"; // Documented default is 10
    format: "int32";
    minimum: 1;
    maximum: 100; // Set a reasonable max limit
  }];
  // Could add optional filtering parameters here, e.g., by role
  // optional string role_filter = 3 [(...)]
}

// Response containing a list of users
message ListUsersResponse {
   option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
        title: "Paginated User List";
        description: "A list of users along with pagination details.";
    }
   };
  repeated UserResponse users = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "The list of user objects found for the current page.";
  }];
  int64 total = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Total number of users matching the criteria (across all pages).";
    example: "153";
    format: "int64";
  }];
  int32 limit = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "The limit value used for this request.";
    example: "25";
    format: "int32";
  }];
  int32 offset = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "The offset value used for this request.";
    example: "50";
    format: "int32";
  }];
  // total_pages is often calculated, maybe not needed explicitly if total/limit/offset are present
  // int32 total_pages = 5;
}

// Request for user login
message LoginRequest {
   option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
        title: "Login Credentials";
        required: ["email", "password"];
     }
   };
  string email = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "User's email address for login.";
    example: "\"jane.doe@example.com\"";
    format: "email";
    // No default for login email
  }];
  string password = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "User's password for login.";
    example: "\"CorrectP@ssw0rd\"";
    format: "password";
    // No default for login password
  }];
}

// Response for successful login
message LoginResponse {
   option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: { title: "Login Result"; }
   };
  string token = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "JWT authentication token to be used for subsequent authenticated requests.";
    example: "\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJleHAiOjE1MTYyNDI2MjJ9.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\""; // Example JWT
    format: "jwt"; // Custom format hint
  }];
  int64 expires_at = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Timestamp (Unix epoch seconds) when the token expires.";
    example: "1678901234"; // Unix timestamp example
    format: "int64";
  }];
  UserResponse user = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
     description: "Details of the logged-in user.";
     // No need for example here, the ref to UserResponse schema is enough
  }];
}

// Request to find user by email
message FindByEmailRequest {
   option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: { required: ["email"]; }
   };
  string email = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "The email address of the user to search for.";
    example: "\"find.me@example.com\"";
    format: "email";
    // No default for specific email lookup
  }];
}

// Response containing user information (used by multiple RPCs)
message UserResponse {
   option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: { title: "User Details"; }
   };
  string id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Unique identifier for the user.";
    example: "\"a1b2c3d4-e5f6-7890-1234-567890abcdef\"";
    format: "uuid";
    read_only: true; // Typically read-only in responses
  }];
  string email = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "User's email address.";
    example: "\"jane.doe@example.com\"";
    format: "email";
    read_only: true;
  }];
  string first_name = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "User's first name.";
    example: "\"Jane\"";
    read_only: true;
  }];
  string last_name = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "User's last name.";
    example: "\"Doe\"";
    read_only: true;
  }];
  string role = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "User's role in the system.";
    example: "\"officer\"";
    read_only: true;
  }];
  int64 created_at = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Timestamp (Unix epoch seconds) when the user account was created.";
    example: "1678888000"; // Unix timestamp example
    format: "int64"; // Or potentially "date-time" if using google.protobuf.Timestamp
    read_only: true;
  }];
  int64 updated_at = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Timestamp (Unix epoch seconds) when the user account was last updated.";
    example: "1678900000"; // Unix timestamp example
    format: "int64";
    read_only: true;
  }];
  // Use google.protobuf.Timestamp for nullable time fields if needed, and handle zero value for int64
  optional int64 deleted_at = 8 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Timestamp (Unix epoch seconds) when the user was soft-deleted. Omitted if not deleted.";
    example: "1678901234"; // Example only if applicable
    format: "int64";
    read_only: true;
  }];
  // Adding username field example
  string username = 9 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Unique username for the account (optional, distinct from email).";
    example: "\"janedoe99\"";
    read_only: true;
  }];
  bool is_active = 10 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Indicates whether the user account is currently active.";
    example: "true"; // Boolean example
    read_only: true;
  }];
  int64 last_login_at = 11 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Timestamp (Unix epoch seconds) of the user's last login.";
    example: "1678900500";
    format: "int64";
    read_only: true;
  }];
  // Added phone/address to response for completeness
   string phone = 12 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "User's phone number.";
    example: "\"+14155552671\"";
    read_only: true;
  }];
  string address = 13 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "User's full address.";
    example: "\"1600 Amphitheatre Parkway, Mountain View, CA 94043\"";
     read_only: true;
  }];
   int32 age = 14 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "User's age.";
    example: "30";
    format: "int32";
    read_only: true;
  }];
   string profile_pic = 15 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "URL to user's profile picture.";
    example: "\"https://example.com/profiles/johndoe.jpg\"";
    format: "url";
    read_only: true;
  }];
}