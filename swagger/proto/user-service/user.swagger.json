{
  "swagger": "2.0",
  "info": {
    "title": "User Service API",
    "description": "API for managing users and authentication.",
    "version": "1.0"
  },
  "tags": [
    {
      "name": "UserService",
      "description": "Operations related to user management and authentication"
    }
  ],
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/v1/auth/login": {
      "post": {
        "summary": "User Login",
        "description": "Authenticates a user and returns access/refresh tokens.",
        "operationId": "UserService_Login",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/userserviceLoginResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Credentials required for user authentication.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userserviceLoginRequest"
            }
          }
        ],
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/v1/auth/refresh": {
      "post": {
        "summary": "Refresh Token",
        "description": "Obtains a new access token using a valid refresh token.",
        "operationId": "UserService_Refresh",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/userserviceRefreshResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Requires a valid refresh token to obtain a new access token.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userserviceRefreshRequest"
            }
          }
        ],
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/v1/users": {
      "get": {
        "summary": "List Users",
        "description": "Retrieves a paginated list of users, with filtering and sorting options.",
        "operationId": "UserService_List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/userserviceListUsersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "options.limit",
            "description": "Maximum number of items to return per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": "50"
          },
          {
            "name": "options.offset",
            "description": "Number of items to skip before starting to collect the result set (for pagination).",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": "0"
          },
          {
            "name": "options.sortBy",
            "description": "Field name to sort the results by (e.g., 'created_at', 'name').",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "\"created_at\""
          },
          {
            "name": "options.sortDesc",
            "description": "Set to true to sort in descending order.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": "true"
          },
          {
            "name": "options.filters",
            "description": "Key-value pairs for specific field filtering. Values should correspond to google.protobuf.Value structure (e.g., {\"email\": \"user@gmail.com\"}).",
            "in": "query",
            "required": false
          },
          {
            "name": "options.includeDeleted",
            "description": "Set to true to include soft-deleted records in the results.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": "false"
          }
        ],
        "tags": [
          "Users"
        ]
      },
      "post": {
        "summary": "Create User",
        "description": "Creates a new user account.",
        "operationId": "UserService_Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/userserviceCreateUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Data required to create a new user.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userserviceCreateUserRequest"
            }
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/api/v1/users/bulk/create": {
      "post": {
        "summary": "Create Multiple Users (Bulk)",
        "description": "Creates multiple user accounts in a single request.",
        "operationId": "UserService_CreateMany",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/userserviceCreateUsersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "A list of user creation requests for bulk insertion.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userserviceCreateUsersRequest"
            }
          }
        ],
        "tags": [
          "Users (Bulk)"
        ]
      }
    },
    "/api/v1/users/bulk/delete": {
      "post": {
        "summary": "Delete Multiple Users (Bulk, Soft/Hard)",
        "description": "Deletes multiple users by ID. Defaults to soft delete. Set 'hard_delete' field in the request body for permanent deletion.",
        "operationId": "UserService_DeleteMany",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "A list of user IDs to delete and whether it should be a permanent (hard) delete.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userserviceDeleteUsersRequest"
            }
          }
        ],
        "tags": [
          "Users (Bulk)"
        ]
      }
    },
    "/api/v1/users/bulk/update": {
      "patch": {
        "summary": "Update Multiple Users (Bulk)",
        "description": "Updates multiple users based on a list of IDs and corresponding update data.",
        "operationId": "UserService_UpdateMany",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "A list of users to update, each specifying an ID and the data to change.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userserviceUpdateUsersRequest"
            }
          }
        ],
        "tags": [
          "Users (Bulk)"
        ]
      }
    },
    "/api/v1/users/search": {
      "post": {
        "summary": "Find Users with Filter",
        "description": "Performs an advanced search for users using complex filters provided in the request body.",
        "operationId": "UserService_FindWithFilter",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/userserviceFindUsersWithFilterResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Advanced search criteria for users, using filters, pagination, and sorting defined within FilterOptions.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userserviceFindUsersWithFilterRequest"
            }
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/api/v1/users/{id}": {
      "get": {
        "summary": "Get User by ID",
        "description": "Retrieves details of a specific user by their ID.",
        "operationId": "UserService_GetByID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/userserviceGetUserByIDResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The UUID of the user to retrieve.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Users"
        ]
      },
      "delete": {
        "summary": "Delete User (Soft/Hard)",
        "description": "Deletes a user. Defaults to soft delete. Set 'hard_delete=true' query parameter for permanent deletion.",
        "operationId": "UserService_Delete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The UUID of the user to delete.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "hardDelete",
            "description": "Add field to distinguish between soft and hard delete\n\nIf true, performs a permanent (hard) delete. If false or omitted, performs a soft delete.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": "false"
          }
        ],
        "tags": [
          "Users"
        ]
      },
      "patch": {
        "summary": "Update User",
        "description": "Updates specific fields of an existing user.",
        "operationId": "UserService_Update",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/userserviceUpdateUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The UUID of the user to update.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserServiceUpdateBody"
            }
          }
        ],
        "tags": [
          "Users"
        ]
      }
    }
  },
  "definitions": {
    "UserServiceUpdateBody": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "example": "johndoeupdated",
          "description": "New username.",
          "title": "Fields corresponding to schema.UserUpdateDTO (using wrappers for optionality)"
        },
        "email": {
          "type": "string",
          "example": "john.doe.updated@example.com",
          "description": "New email address."
        },
        "firstName": {
          "type": "string",
          "example": "Jonathan",
          "description": "New first name.",
          "title": "Password updates might need a separate, dedicated RPC for security"
        },
        "lastName": {
          "type": "string",
          "example": "Doe",
          "description": "New last name."
        },
        "role": {
          "type": "string",
          "example": "manager",
          "description": "New role."
        },
        "isActive": {
          "type": "boolean",
          "example": false,
          "description": "Update active status."
        },
        "phone": {
          "type": "string",
          "example": "+1122334455",
          "description": "New phone number."
        },
        "address": {
          "type": "string",
          "example": "789 Pine Ln, Otherville",
          "description": "New address."
        },
        "age": {
          "type": "integer",
          "format": "int32",
          "example": 31,
          "description": "New age."
        },
        "profilePic": {
          "type": "string",
          "example": "https://example.com/profiles/johndoe_v2.jpg",
          "description": "New profile picture URL."
        }
      },
      "description": "Data for updating an existing user. Include only the fields to be changed.",
      "title": "Update User Request"
    },
    "coreFilterOptions": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "format": "int32",
          "example": 50,
          "default": "50",
          "description": "Maximum number of items to return per page."
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "example": 0,
          "default": "0",
          "description": "Number of items to skip before starting to collect the result set (for pagination)."
        },
        "sortBy": {
          "type": "string",
          "example": "created_at",
          "default": "\"created_at\"",
          "description": "Field name to sort the results by (e.g., 'created_at', 'name')."
        },
        "sortDesc": {
          "type": "boolean",
          "example": true,
          "default": "true",
          "description": "Set to true to sort in descending order."
        },
        "filters": {
          "type": "object",
          "example": {
            "email": "user@gmail.com"
          },
          "additionalProperties": {},
          "description": "Key-value pairs for specific field filtering. Values should correspond to google.protobuf.Value structure (e.g., {\"email\": \"user@gmail.com\"})."
        },
        "includeDeleted": {
          "type": "boolean",
          "example": false,
          "default": "false",
          "description": "Set to true to include soft-deleted records in the results."
        }
      },
      "description": "Represents common filtering, pagination, and sorting options.\nBased on pkg/core/types/common.go FilterOptions struct."
    },
    "corePaginationInfo": {
      "type": "object",
      "properties": {
        "totalItems": {
          "type": "string",
          "format": "int64",
          "example": 1234,
          "description": "Total number of items matching the query criteria across all pages."
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "example": 50,
          "description": "The limit (page size) used for the current response."
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "example": 0,
          "description": "The offset (number of items skipped) used for the current response."
        }
      },
      "description": "Represents common pagination metadata included in list responses.\nBased on pkg/core/types/common.go PaginationResult struct (metadata fields only).\nSpecific list responses should include this alongside their repeated items field."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "userserviceCreateUserRequest": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "example": "janedoe",
          "description": "Desired unique username.",
          "title": "Fields corresponding to schema.UserCreateDTO"
        },
        "email": {
          "type": "string",
          "example": "jane.doe@example.com",
          "description": "Desired unique email address."
        },
        "password": {
          "type": "string",
          "format": "password",
          "example": "StrongP@ssw0rd!",
          "description": "User's desired password (min 8 characters)."
        },
        "firstName": {
          "type": "string",
          "example": "Jane",
          "description": "User's first name."
        },
        "lastName": {
          "type": "string",
          "example": "Doe",
          "description": "User's last name."
        },
        "role": {
          "type": "string",
          "example": "officer",
          "default": "\"officer\"",
          "description": "User's role (e.g., 'admin', 'manager', 'officer'). Defaults to 'officer' if omitted or invalid."
        },
        "isActive": {
          "type": "boolean",
          "example": false,
          "default": "false",
          "description": "Set initial active status. Defaults to false."
        },
        "phone": {
          "type": "string",
          "example": "+1987654321",
          "description": "User's phone number (optional)."
        },
        "address": {
          "type": "string",
          "example": "456 Oak Ave, Sometown",
          "description": "User's address (optional)."
        },
        "age": {
          "type": "integer",
          "format": "int32",
          "example": 28,
          "description": "User's age (optional)."
        },
        "profilePic": {
          "type": "string",
          "example": "https://example.com/profiles/janedoe.jpg",
          "description": "URL to the user's profile picture (optional)."
        }
      },
      "description": "Data required to create a new user.",
      "title": "Create User Request",
      "required": [
        "username",
        "email",
        "password",
        "firstName",
        "lastName"
      ]
    },
    "userserviceCreateUserResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/userserviceUser",
          "title": "Example defined in User message"
        }
      },
      "description": "Contains the newly created user details.",
      "title": "Create User Response"
    },
    "userserviceCreateUsersRequest": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/userserviceCreateUserRequest"
          }
        }
      },
      "description": "A list of user creation requests for bulk insertion.",
      "title": "Create Users Request (Bulk)"
    },
    "userserviceCreateUsersResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/userserviceUser"
          },
          "title": "Example defined in User message"
        }
      },
      "description": "A list containing the details of the newly created users.",
      "title": "Create Users Response (Bulk)"
    },
    "userserviceDeleteUsersRequest": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "example": [
            "a1b2c3d4-e5f6-7890-1234-567890abcdef",
            "b2c3d4e5-f6a7-8901-2345-67890abcdef0"
          ],
          "items": {
            "type": "string"
          },
          "description": "List of user UUIDs to delete.",
          "title": "Remove filter, add IDs"
        },
        "hardDelete": {
          "type": "boolean",
          "example": false,
          "default": "false",
          "description": "If true, performs a permanent (hard) delete. If false or omitted, performs a soft delete.",
          "title": "Add hard_delete flag"
        }
      },
      "description": "A list of user IDs to delete and whether it should be a permanent (hard) delete.",
      "title": "Delete Users Request (Bulk)",
      "required": [
        "ids"
      ]
    },
    "userserviceFindUsersWithFilterRequest": {
      "type": "object",
      "properties": {
        "options": {
          "$ref": "#/definitions/coreFilterOptions",
          "description": "Filtering, pagination and sorting options (see core.FilterOptions for defaults/examples)."
        }
      },
      "description": "Advanced search criteria for users, using filters, pagination, and sorting defined within FilterOptions.",
      "title": "Find Users With Filter Request"
    },
    "userserviceFindUsersWithFilterResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/userserviceUser"
          },
          "title": "Example defined in User message"
        },
        "paginationInfo": {
          "$ref": "#/definitions/corePaginationInfo",
          "title": "Example defined in core.PaginationInfo message"
        }
      },
      "description": "A paginated list of users matching the advanced search criteria.",
      "title": "Find Users With Filter Response"
    },
    "userserviceGetUserByIDResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/userserviceUser",
          "title": "Example defined in User message"
        }
      },
      "description": "Contains the details of the requested user.",
      "title": "Get User By ID Response"
    },
    "userserviceListUsersResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/userserviceUser"
          },
          "title": "Example defined in User message"
        },
        "paginationInfo": {
          "$ref": "#/definitions/corePaginationInfo",
          "title": "PaginationInfo fields examples/defaults are defined in proto/core/common.proto"
        }
      },
      "description": "A paginated list of users matching the criteria.",
      "title": "List Users Response"
    },
    "userserviceLoginRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "john.doe@example.com",
          "description": "User's email address."
        },
        "password": {
          "type": "string",
          "format": "password",
          "example": "password123",
          "description": "User's password."
        }
      },
      "description": "Credentials required for user authentication.",
      "title": "Login Request",
      "required": [
        "email",
        "password"
      ]
    },
    "userserviceLoginResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/userserviceUser",
          "title": "Example defined in User message"
        },
        "accessToken": {
          "type": "string",
          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c",
          "description": "JWT access token for API authorization."
        },
        "refreshToken": {
          "type": "string",
          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwicmVmcmVzaCI6dHJ1ZSwiaWF0IjoxNTE2MjM5MDIyfQ.9dxFj_KbboLCHdO0XAGna4z0aT4p4yMEQQHuDmPrzy8",
          "description": "JWT refresh token to obtain new access tokens."
        },
        "expiresAt": {
          "type": "string",
          "format": "int64",
          "example": 1678886400,
          "description": "Unix timestamp (seconds) when the access token expires."
        }
      },
      "description": "Contains user details and authentication tokens upon successful login.",
      "title": "Login Response"
    },
    "userserviceRefreshRequest": {
      "type": "object",
      "properties": {
        "refreshToken": {
          "type": "string",
          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwicmVmcmVzaCI6dHJ1ZSwiaWF0IjoxNTE2MjM5MDIyfQ.9dxFj_KbboLCHdO0XAGna4z0aT4p4yMEQQHuDmPrzy8",
          "description": "The JWT refresh token."
        }
      },
      "description": "Requires a valid refresh token to obtain a new access token.",
      "title": "Refresh Request",
      "required": [
        "refreshToken"
      ]
    },
    "userserviceRefreshResponse": {
      "type": "object",
      "properties": {
        "accessToken": {
          "type": "string",
          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c",
          "description": "Newly issued JWT access token."
        },
        "refreshToken": {
          "type": "string",
          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwicmVmcmVzaCI6dHJ1ZSwiaWF0IjoxNTE2MjM5MDIyfQ.9dxFj_KbboLCHdO0XAGna4z0aT4p4yMEQQHuDmPrzy8",
          "description": "The refresh token (often the same one is returned)."
        },
        "expiresAt": {
          "type": "string",
          "format": "int64",
          "example": 1678889400,
          "description": "Unix timestamp (seconds) when the new access token expires."
        }
      },
      "description": "Contains a new access token and potentially the same refresh token.",
      "title": "Refresh Response"
    },
    "userserviceUpdateUserItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "a1b2c3d4-e5f6-7890-1234-567890abcdef",
          "description": "The UUID of the user to update."
        },
        "username": {
          "type": "string",
          "example": "updatedusername",
          "description": "New username.",
          "title": "Reuse optional fields from UpdateUserRequest (excluding id)"
        },
        "email": {
          "type": "string",
          "example": "updated.email@example.com",
          "description": "New email address.",
          "title": "Corrected escaping"
        },
        "firstName": {
          "type": "string",
          "example": "UpdatedFirstName",
          "description": "New first name.",
          "title": "Corrected escaping"
        },
        "lastName": {
          "type": "string",
          "example": "UpdatedLastName",
          "description": "New last name.",
          "title": "Corrected escaping"
        },
        "role": {
          "type": "string",
          "example": "manager",
          "description": "New role.",
          "title": "Corrected escaping"
        },
        "isActive": {
          "type": "boolean",
          "example": true,
          "description": "Update active status.",
          "title": "Corrected escaping (bool doesn't need quotes)"
        },
        "phone": {
          "type": "string",
          "example": "+1555000111",
          "description": "New phone number.",
          "title": "Corrected escaping"
        },
        "address": {
          "type": "string",
          "example": "999 Updated St",
          "description": "New address.",
          "title": "Corrected escaping"
        },
        "age": {
          "type": "integer",
          "format": "int32",
          "example": 40,
          "description": "New age.",
          "title": "Corrected escaping (number doesn't need quotes)"
        },
        "profilePic": {
          "type": "string",
          "example": "https://example.com/profiles/updated.jpg",
          "description": "New profile picture URL.",
          "title": "Corrected escaping"
        }
      },
      "description": "Specifies the ID and the fields to update for a single user in a bulk operation.",
      "title": "Update User Item",
      "required": [
        "id"
      ]
    },
    "userserviceUpdateUserResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/userserviceUser",
          "title": "Example defined in User message"
        }
      },
      "description": "Contains the updated user details.",
      "title": "Update User Response"
    },
    "userserviceUpdateUsersRequest": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/userserviceUpdateUserItem"
          },
          "description": "List of user updates. Each item must contain an ID and the fields to modify.",
          "title": "Replace filter and individual fields with a list of items"
        }
      },
      "description": "A list of users to update, each specifying an ID and the data to change.",
      "title": "Update Users Request (Bulk)"
    },
    "userserviceUser": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "a1b2c3d4-e5f6-7890-1234-567890abcdef",
          "description": "Unique identifier for the user (UUID format)."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "example": "2023-01-15T10:30:00Z",
          "description": "Timestamp when the user was created (RFC3339 UTC format)."
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "example": "2023-01-16T11:00:00Z",
          "description": "Timestamp when the user was last updated (RFC3339 UTC format)."
        },
        "deletedAt": {
          "type": "string",
          "format": "date-time",
          "example": "2023-01-17T12:00:00Z",
          "description": "Timestamp when the user was soft-deleted (RFC3339 UTC format). Null if not deleted."
        },
        "username": {
          "type": "string",
          "example": "johndoe",
          "description": "Unique username for the user."
        },
        "email": {
          "type": "string",
          "example": "john.doe@example.com",
          "description": "Unique email address for the user."
        },
        "firstName": {
          "type": "string",
          "example": "John",
          "description": "User's first name.",
          "title": "Password is not included in responses"
        },
        "lastName": {
          "type": "string",
          "example": "Doe",
          "description": "User's last name."
        },
        "role": {
          "type": "string",
          "example": "officer",
          "description": "User's role (e.g., 'admin', 'manager', 'officer')."
        },
        "isActive": {
          "type": "boolean",
          "example": true,
          "default": "false",
          "description": "Indicates if the user account is active."
        },
        "lastLoginAt": {
          "type": "string",
          "format": "date-time",
          "example": "2023-01-18T09:00:00Z",
          "description": "Timestamp of the user's last login (RFC3339 UTC format). Null if never logged in."
        },
        "phone": {
          "type": "string",
          "example": "+1234567890",
          "description": "User's phone number (optional)."
        },
        "address": {
          "type": "string",
          "example": "123 Main St, Anytown",
          "description": "User's address (optional)."
        },
        "age": {
          "type": "integer",
          "format": "int32",
          "example": 30,
          "description": "User's age (optional)."
        },
        "profilePic": {
          "type": "string",
          "example": "https://example.com/profiles/johndoe.jpg",
          "description": "URL to the user's profile picture (optional)."
        }
      },
      "description": "Represents a user in the system.",
      "title": "User",
      "required": [
        "id",
        "createdAt",
        "updatedAt",
        "username",
        "email",
        "firstName",
        "lastName",
        "role",
        "isActive"
      ]
    }
  },
  "securityDefinitions": {
    "BearerAuth": {
      "type": "apiKey",
      "description": "JWT Bearer token (e.g., 'Bearer ey...')",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "BearerAuth": []
    }
  ]
}
